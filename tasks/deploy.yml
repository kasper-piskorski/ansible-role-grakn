---
- name: Setup group
  group:
    name: "{{group_name}}"
    system: "yes"

- name: Setup user
  user:
    name: "{{user_name}}"
    system: "yes"
    group: "{{group_name}}"
    createhome: "no"

- name: Create cluster home and log directory
  file:
    path: "{{item}}"
    state: directory
    owner: "{{user_name}}"
    group: "{{group_name}}"
    mode: 755
  with_items:
       - "{{cluster_home}}"
       - "{{log_home}}"

- name: Check Grakn service exists
  stat:
    path: /etc/systemd/system/grakn.service
  register: grakn_service

- name: Stop old Grakn
  service:
    name: grakn
    state: stopped
  when: redeploy == true and grakn_service.stat.exists == true

- name: Delete old Grakn
  file:
    path: "{{cluster_home}}grakn"
    state: absent
  when: redeploy == true

- name: Grakn version
  debug:
    msg: "Deploying Grakn {{ grakn_version }}"

- name: Download Grakn
  get_url:
    url: "{{ grakn_download_url }}"
    dest: /tmp/
  when: upload_release == false

- name: Upload new Grakn
  copy:
    src: "{{ grakn_upload_directory }}/{{ grakn_package }}"
    dest: "/tmp/"
  when: upload_release == true

- name: Unpack Grakn
  unarchive:
    src: "/tmp/{{ grakn_package }}"
    dest: "/tmp/"
    copy: no
    creates: "{{ cluster_home }}/grakn/"

- name: Rename directory
  command: "mv /tmp/{{ grakn_dist }} {{ cluster_home }}/grakn"
  args:
    creates: "{{ cluster_home }}/grakn/"

- name: Upload license
  copy:
    src: "{{ grakn_upload_directory }}/{{ grakn_license }}"
    dest: "{{ cluster_home }}/grakn/"
  when: grakn_dist | search("kgms")

- name: Upload decrypt file
  copy:
    src: "{{ grakn_upload_directory }}/{{ grakn_decrypt }}"
    dest: "{{ cluster_home }}/grakn/"
  when: grakn_dist | search("kgms")

#######################
# CQLSH INSTALLATION
#######################
- name: Install python-pip
  apt:
    name: python-pip
    state: present

- name: Install cassandra-driver
  pip:
    name: cassandra-driver

- name: cqlsh
  pip:
    name: cqlsh
    version: 5.0.3

- block:
  - name: Configure grakn.properties
    template:
      src: "{{ item }}"
      dest: "{{ cluster_home }}/grakn/conf/grakn.properties"
      owner: "{{user_name}}"
      group: "{{group_name}}"
    with_first_found:
      - "{{ grakn_version | regex_replace('-SNAPSHOT') }}/grakn.properties.j2"
      - "grakn.properties.j2"
    notify: restart grakn

  - name: Configure logback.xml
    template:
      src: "{{ item }}"
      dest: "{{ cluster_home }}/grakn/conf/logback.xml"
      owner: "{{user_name}}"
      group: "{{group_name}}"
    with_first_found:
      - files:
        - "{{ playbook_dir }}/templates/logback.xml.j2"
        - "{{ grakn_version | regex_replace('-SNAPSHOT') }}/logback.xml.j2"
        skip: true
    when: custom_logback == true
    notify: restart grakn

  - name: systemd service
    template:
      src: "{{ item }}"
      dest: /lib/systemd/system/grakn.service
      owner: "{{user_name}}"
      group: "{{group_name}}"
    register: systemd_grakn_config
    notify: restart grakn
    with_first_found:
      - "{{ grakn_version }}/grakn.service.j2"
      - "grakn.service.j2"

  - name: environment file
    template:
      src: "{{ item }}"
      dest: /etc/default/grakn
      owner: "{{user_name}}"
      group: "{{group_name}}"
    notify: restart grakn
    with_first_found:
      - "{{ grakn_version }}/default-grakn-environmentfile"
      - "default-grakn-environmentfile"

  - name: Reload systemd
    command: systemctl daemon-reload
    when: systemd_grakn_config.changed
  tags:
    - configure_grakn
    - configure

- name: Ensure ownership
  file:
    path: "{{item}}"
    owner: "{{user_name}}"
    group: "{{group_name}}"
    recurse: yes
  with_items:
    - "{{cluster_home}}grakn/"

- name: Start Grakn
  service:
    name: grakn
    state: "{{ grakn_service_state }}"
    enabled: "{{ grakn_service_enabled }}"

- name: Create symlinks
  file:
     src: "{{ cluster_home }}/grakn/{{ item.path }}"
     dest: "/usr/local/bin/{{ item.dest }}"
     state: link
  with_items:
     - { path: 'graql', dest: 'graql' }
